void MapAVL::leftRotation(Nodo* a){

	Nodo* b = a->right;
	
	a->right = b->left;
	
	if(b->left != NULL) b->left->father = a;
	
	if(a->father == NULL) root = b;
	
	else if(a == a->father->left) a->father->left = b;  

	else if(a == a->father->right) a->father->right = b;
	
	b->father = a->father;
	
	a->father = b;
	
	b->left = a;
	
	
	if(a->left!= NULL){
	
		updateHeight(a->left);
	}
	
	else if(a->right!=NULL){
	
		updateHeight(a->right);
	}
	
	
	else{
	
		a->height = 0;
		a->diff = 0;
		
		updateHeight(a);
	}
}	


void MapAVL::rightRotation(Nodo* a){

	Nodo* b = a->left;
	
	a->left = b->right;
	
	if(b->right != NULL){
	
		b->right->father = a;
	}
	
	if(a->father == NULL) root = b;
	
	else if(a == a->father->left) a->father->left = b;  

	else if(a == a->father->right) a->father->right = b;
	
	b->father = a->father;
	
	a->father = b;
	
	b->right = a;


	if(a->right!= NULL){
	
		updateHeight(a->right);
	}
	
	
	else if(a->left!= NULL){
	
		updateHeight(a->left);
	}
	
	else{
		
		a->height = 0;
		a->diff = 0;
		
		updateHeight(a);
	}
}



void MapAVL::leftRightRotation(Nodo* a){

	Nodo* c = a->right;
	Nodo* b = c->left;
	
	a->right = b->left;
	
	if(b->left!=NULL){
	
		b->left->father = a;
	}
	
	if(a->father == NULL){
	
		root = b;
	}
	
	else if(a == a->father->left){
	
		a->father->left = b;
	}
	
	else if(a == a->father->right){
	
		a->father->right = b;
	}
	
	b->father = a->father;
	
	a->father = b;
	b->left = a;
	
	c->left = b->right;
	
	if(b->right!=NULL){
	
		b->right->father = c;
	}
	
	c->father = b;
	b->right = c;
	
	if(a->left == NULL && a->right == NULL){
	
		a->height = 0;
		a->diff = 0;
	}
	
	else if(a->left != NULL && a->right!= NULL){
		
		a->height = std::max(a->left->height,a->right->height) +1;
		a->diff = a->right->height - a->left->height; 
	}
	
	else{
	
		if(a->left==NULL){
		
			a->height = a->right->height +1;
			a->diff =1;
		}
		
		else if(a->right == NULL){
		
			a->height = a->left->height +1;
			a->diff = -1;
		}
	}
	
	if(c->left == NULL && c->right == NULL){
	
		c->height = 0;
		c->diff = 0;
	}
	
	else if(c->left != NULL && c->right!= NULL){
		
		c->height = std::max(c->left->height,c->right->height) +1;
		c->diff = c->right->height - c->left->height; 
	}
	
	else{
	
		if(c->left==NULL){
		
			c->height = c->right->height +1;
			c->diff =1;
		}
		
		else if(c->right == NULL){
		
			c->height = c->left->height +1;
			c->diff = -1;
		}
	}
	
	updateHeight(c);
	
}


void MapAVL::rightLeftRotation(Nodo* c){

	Nodo* a = c->left;
	Nodo* b = a->right;
	
	a->right = b->left;
	
	if(b->left!=NULL){
	
		b->left->father = a;
	}
	
	if(c->father == NULL){
	
		root = b;
	}
	
	else if(c == c->father->right){
	
		c->father->right = b;
	}
	
	else if(c == c->father->left){
	
		c->father->left = b;
	}
	
	c->left = b->right;
	
	if(b->right!=NULL){
	
		b->right->father = c;
	}
	
	b->father = c->father;
		
	b->left = a;
	
	b->right = c;
	
	a->father = b;
	
	c->father = b;
	
		
	if(a->left == NULL && a->right == NULL){
	
		a->height = 0;
		a->diff = 0;
	}
	
	else if(a->left != NULL && a->right!= NULL){
		
		a->height = std::max(a->left->height,a->right->height) +1;
		a->diff = a->right->height - a->left->height; 
	}
	
	else{
	
		if(a->left==NULL){
		
			a->height = a->right->height +1;
			a->diff =1;
		}
		
		else if(a->right == NULL){
		
			a->height = a->left->height +1;
			a->diff = -1;
		}
	}
	
	
	
	if(c->left == NULL && c->right == NULL){
	
		c->height = 0;
		c->diff = 0;
	}
	
	else if(c->left != NULL && c->right!= NULL){
		
		c->height = std::max(c->left->height,c->right->height) +1;
		c->diff = c->right->height - c->left->height; 
	}
	
	else{
	
		if(c->left==NULL){
		
			c->height = c->right->height +1;
			c->diff =1;
		}
		
		else if(c->right == NULL){
		
			c->height = c->left->height +1;
			c->diff = -1;
		}
	}
	
	updateHeight(c);
}
